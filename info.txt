+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

GitHub:

# Or add all changes
git add .

git commit -m "Update"

git pull origin main --rebase

git push origin main

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

git pull origin main
git pull origin master

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Start:

#Frontend:
Django - Stoc Data Analisys\stock_analysis_project> cd frontend
Django - Stoc Data Analisys\stock_analysis_project\frontend> npm start

#Backend
Django - Stoc Data Analisys\stock_analysis_project> python manage.py runserver


!!!
cd stock_analysis_project
!!!


python manage.py makemigrations

python manage.py migrate    

python manage.py fetch_stock_data

python manage.py runserver  
PS C:\Users\Adel\Desktop\sajat\Django - Stoc Data Analisys\stock_analysis_project> python manage.py runserver 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

python manage.py fetch_stock_data MSFT "Microsoft Corporation"
python manage.py fetch_stock_data AAPL "Apple Inc."
python manage.py fetch_stock_data AMZN "Amazon.com Inc."

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

stock_analysis_project/
├── manage.py
├── frontend/
│   ├── public/
│   ├── src/
│   │   └── AddStock.js
│   │   └── App.css
│   │   └── App.js
│   │   └── StockAnalysis.js
│   │   └── StockDetail.js
│   │   └── StockList.js
│   ├── .gitignore
│   ├── package-lock.json
│   └── package.json
├── stock_analysis_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── stock_data/
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── management/
    │   └── commands/
    │       └── fetch_stock_data.py
    ├── migrations/
    ├── models.py
    ├── templates/
    │   └── stock_data/
    ├── tests.py
    ├── urls.py
    └── views.py


    stock_analysis_project/
├── manage.py
├── frontend/
│   ├── public/
│   ├── src/
│   │   └── AddStock.js:
                import React, { useState } from 'react';
                import axios from 'axios';
                import './App.css';

                function AddStock() {
                const [symbol, setSymbol] = useState('');
                const [name, setName] = useState('');
                const [message, setMessage] = useState('');

                const handleSubmit = (event) => {
                    event.preventDefault();
                    axios.post('http://localhost:8000/add_stock/', { symbol, name })
                    .then(response => {
                        setMessage('Stock added successfully');
                    })
                    .catch(error => {
                        setMessage('Error adding stock: ' + error.response.data.error);
                    });
                };

                return (
                    <div className="container">
                    <h1 className="heading">Add Stock</h1>
                    <form onSubmit={handleSubmit}>
                        <div className="form-group">
                        <label>Symbol:</label>
                        <input
                            type="text"
                            value={symbol}
                            onChange={(e) => setSymbol(e.target.value)}
                            required
                        />
                        </div>
                        <div className="form-group">
                        <label>Name:</label>
                        <input
                            type="text"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            required
                        />
                        </div>
                        <button type="submit" className="submit-button">Add Stock</button>
                    </form>
                    {message && <p className="message">{message}</p>}
                    </div>
                );
                }

                export default AddStock;
│   │   └── App.css
│   │   └── App.js:
                import React from 'react';
                import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
                import StockList from './StockList';
                import StockDetail from './StockDetail';
                import StockAnalysis from './StockAnalysis';
                import AddStock from './AddStock';
                import './App.css';

                function App() {
                return (
                    <Router>
                    <div>
                    <nav>
                        <Link to="/" className="home-button">Home</Link>
                        <Link to="/add_stock" className="add-stock-button">Add Stock</Link>  {/* New link for adding stock */}
                    </nav>
                    <Routes>
                        <Route path="/" element={<StockList />} />
                        <Route path="/stocks/:symbol" element={<StockDetail />} />
                        <Route path="/stocks/:symbol/analysis" element={<StockAnalysis />} />
                        <Route path="/add_stock" element={<AddStock />} />  {/* New route for adding stock */}
                    </Routes>
                    </div>
                    </Router>
                );
                }

                export default App;
│   │   └── StockAnalysis.js:
                import React, { useState, useEffect } from 'react';
                import { useParams } from 'react-router-dom';
                import axios from 'axios';
                import './App.css';

                function StockAnalysis() {
                const { symbol } = useParams();
                const [analysis, setAnalysis] = useState(null);

                useEffect(() => {
                    axios.get(`http://localhost:8000/stocks/${symbol}/analysis/`)
                    .then(response => {
                        setAnalysis(response.data);
                    })
                    .catch(error => {
                        console.error('Error fetching stock analysis:', error);
                    });
                }, [symbol]);

                if (!analysis) return <div className="loading">Loading...</div>;

                return (
                    <div className="container">
                    <h1 className="heading">{analysis.stock.name} ({analysis.stock.symbol}) - Stock Analysis</h1>
                    <div className="analysis-container">
                        <div className="analysis-item">
                        <strong>Average Closing Price:</strong> {analysis.average_close.toFixed(2)}
                        </div>
                        <div className="analysis-item">
                        <strong>Highest Closing Price:</strong> {analysis.highest_close.toFixed(2)}
                        </div>
                        <div className="analysis-item">
                        <strong>Lowest Closing Price:</strong> {analysis.lowest_close.toFixed(2)}
                        </div>
                        <div className="analysis-item">
                        <strong>Average Volume:</strong> {analysis.average_volume.toFixed(0)}
                        </div>
                    </div>
                    </div>
                );
                }

                export default StockAnalysis;
│   │   └── StockDetail.js:
                import React, { useState, useEffect } from 'react';
                import { useParams, Link } from 'react-router-dom';
                import axios from 'axios';
                import { Line } from 'react-chartjs-2';
                import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
                import './App.css';

                ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

                function StockDetail() {
                const { symbol } = useParams();
                const [stockDetail, setStockDetail] = useState(null);

                useEffect(() => {
                    axios.get(`http://localhost:8000/stocks/${symbol}/`)
                    .then(response => {
                        setStockDetail(response.data);
                    })
                    .catch(error => {
                        console.error('Error fetching stock detail:', error);
                    });
                }, [symbol]);

                if (!stockDetail) return <div className="loading">Loading...</div>;

                // Reverse the stock_prices array to have the dates in ascending order
                const reversedStockPrices = [...stockDetail.stock_prices].reverse();

                const data = {
                    labels: reversedStockPrices.map(price => price.date),
                    datasets: [
                    {
                        label: 'Close Price',
                        data: reversedStockPrices.map(price => price.close_price),
                        borderColor: '#4CAF50',
                        backgroundColor: 'rgba(76, 175, 80, 0.2)',
                        fill: true,
                    },
                    ],
                };

                const options = {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: `${stockDetail.stock.name} (${stockDetail.stock.symbol}) Price Chart`,
                    },
                    },
                    scales: {
                    x: {
                        title: {
                        display: true,
                        text: 'Date',
                        },
                    },
                    y: {
                        title: {
                        display: true,
                        text: 'Close Price',
                        },
                    },
                    },
                };

                return (
                    <div className="container">
                    <h1 className="heading">{stockDetail.stock.name} ({stockDetail.stock.symbol}) - Stock Detail</h1>
                    <Link to={`/stocks/${symbol}/analysis`} className="view-analysis-link">View Analysis</Link>
                    <div className="chart-container">
                        <Line data={data} options={options} />
                    </div>
                    <ul className="list">
                        {reversedStockPrices.map(price => (
                        <li key={price.date} className="list-item">
                            Date: {price.date}, Close: {price.close_price}
                        </li>
                        ))}
                    </ul>
                    </div>
                );
                }

                export default StockDetail;
│   │   └── StockList.js:
                import React, { useState, useEffect } from 'react';
                import { Link } from 'react-router-dom';
                import axios from 'axios';
                import './App.css';

                function StockList() {
                const [stocks, setStocks] = useState([]);

                useEffect(() => {
                    axios.get('http://localhost:8000/stocks/')
                    .then(response => {
                        setStocks(response.data);
                    })
                    .catch(error => {
                        console.error('Error fetching stocks:', error);
                    });
                }, []);

                return (
                    <div className="container">
                    <h1 className="heading">Stock List</h1>
                    <ul className="list">
                        {stocks.map(stock => (
                        <li key={stock.id} className="list-item">
                            <Link to={`/stocks/${stock.symbol}`} className="link">
                            {stock.name} - {stock.symbol}
                            </Link>
                        </li>
                        ))}
                    </ul>
                    </div>
                );
                }

                export default StockList;
│   ├── .gitignore
│   ├── package-lock.json
│   └── package.json
├── stock_analysis_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── stock_data/
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── management/
    │   └── commands/
    │       └── fetch_stock_data.py:
                    import requests
                    from django.core.management.base import BaseCommand
                    from stock_data.models import Stock, StockPrice
                    import logging

                    logger = logging.getLogger(__name__)

                    class Command(BaseCommand):
                        help = 'Fetch stock data from API'

                        def add_arguments(self, parser):
                            parser.add_argument('symbol', type=str, help='Stock symbol to fetch data for')
                            parser.add_argument('name', type=str, help='Name of the stock')

                        def handle(self, *args, **kwargs):
                            API_KEY = '6N1KQG6J4CUBF4O0'
                            STOCK_SYMBOL = kwargs['symbol']
                            STOCK_NAME = kwargs['name']
                            
                            logger.debug(f'Start fetching data for {STOCK_SYMBOL} ({STOCK_NAME})')
                            
                            url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={STOCK_SYMBOL}&apikey={API_KEY}'
                            response = requests.get(url)
                            data = response.json()
                            
                            if "Time Series (Daily)" not in data:
                                logger.error(f"Error fetching data for {STOCK_SYMBOL}: {data}")
                                self.stdout.write(self.style.ERROR(f'Error fetching data for {STOCK_SYMBOL}'))
                                return
                            
                            stock, created = Stock.objects.get_or_create(symbol=STOCK_SYMBOL, defaults={'name': STOCK_NAME})
                            time_series = data['Time Series (Daily)']
                            
                            if not time_series:
                                logger.error(f"No time series data found for {STOCK_SYMBOL}")
                                self.stdout.write(self.style.ERROR(f'No time series data found for {STOCK_SYMBOL}'))
                                return
                            
                            for date, values in time_series.items():
                                if not all(k in values for k in ('1. open', '2. high', '3. low', '4. close', '5. volume')):
                                    logger.error(f"Incomplete data for date {date} for {STOCK_SYMBOL}")
                                    continue
                                
                                StockPrice.objects.update_or_create(
                                    stock=stock,
                                    date=date,
                                    defaults={
                                        'open_price': values['1. open'],
                                        'close_price': values['4. close'],
                                        'high_price': values['2. high'],
                                        'low_price': values['3. low'],
                                        'volume': values['5. volume']
                                    }
                                )
                                logger.debug(f'Updated/created stock price for {STOCK_SYMBOL} on {date}')

                            self.stdout.write(self.style.SUCCESS(f'Successfully fetched data for {STOCK_SYMBOL} ({STOCK_NAME})'))
                            logger.debug(f'Successfully fetched data for {STOCK_SYMBOL} ({STOCK_NAME})')
    ├── migrations/
    ├── models.py:
            from django.db import models

            class Stock(models.Model):
                symbol = models.CharField(max_length=10, unique=True)
                name = models.CharField(max_length=100)

                def __str__(self):
                    return self.name

            class StockPrice(models.Model):
                stock = models.ForeignKey(Stock, on_delete=models.CASCADE)
                date = models.DateField()
                open_price = models.FloatField()
                close_price = models.FloatField()
                high_price = models.FloatField()
                low_price = models.FloatField()
                volume = models.BigIntegerField()

                class Meta:
                    unique_together = ('stock', 'date')

                def __str__(self):
                    return f"{self.stock.symbol} on {self.date}"
    ├── templates/
    │   └── stock_data/
    ├── tests.py
    ├── urls.py:
            from django.urls import path
            from . import views

            urlpatterns = [
                path('', views.stock_list, name='stock_list'),
                path('stocks/', views.stock_list, name='stock_list'),
                path('stocks/<str:symbol>/', views.stock_detail, name='stock_detail'),
                path('stocks/<str:symbol>/analysis/', views.stock_analysis, name='stock_analysis'),
                path('add_stock/', views.add_stock, name='add_stock'),  # New path for adding stock
            ]
    └── views.py:
            from django.shortcuts import get_object_or_404
            from django.http import JsonResponse, HttpResponse
            from django.db.models import Avg, Max, Min
            from django.views.decorators.csrf import csrf_exempt
            from django.core.management import call_command
            from .models import Stock, StockPrice
            import json
            import logging

            logger = logging.getLogger(__name__)

            def stock_list(request):
                stocks = Stock.objects.all()
                stock_list = [{'id': stock.id, 'name': stock.name, 'symbol': stock.symbol} for stock in stocks]
                return JsonResponse(stock_list, safe=False)

            def stock_detail(request, symbol):
                stock = get_object_or_404(Stock, symbol=symbol)
                stock_prices = StockPrice.objects.filter(stock=stock).order_by('-date')
                
                stock_data = {
                    'stock': {
                        'name': stock.name,
                        'symbol': stock.symbol
                    },
                    'stock_prices': [
                        {
                            'date': price.date.strftime('%Y-%m-%d'),
                            'close_price': price.close_price
                        } for price in stock_prices
                    ]
                }
                
                return JsonResponse(stock_data)

            def stock_analysis(request, symbol):
                stock = get_object_or_404(Stock, symbol=symbol)
                stock_prices = StockPrice.objects.filter(stock=stock)
                analysis = {
                    'stock': {'id': stock.id, 'name': stock.name, 'symbol': stock.symbol},
                    'average_close': stock_prices.aggregate(Avg('close_price'))['close_price__avg'],
                    'highest_close': stock_prices.aggregate(Max('close_price'))['close_price__max'],
                    'lowest_close': stock_prices.aggregate(Min('close_price'))['close_price__min'],
                    'average_volume': stock_prices.aggregate(Avg('volume'))['volume__avg'],
                }
                return JsonResponse(analysis)

            @csrf_exempt
            def add_stock(request):
                if request.method == 'POST':
                    try:
                        data = json.loads(request.body)
                        logger.debug(f'Received data: {data}')
                        symbol = data.get('symbol')
                        name = data.get('name')

                        if not symbol or not name:
                            logger.error('Missing symbol or name')
                            return JsonResponse({'error': 'Missing symbol or name'}, status=400)

                        stock, created = Stock.objects.get_or_create(symbol=symbol, defaults={'name': name})
                        logger.debug(f'Stock created: {created}, Stock: {stock}')

                        if created:
                            try:
                                logger.debug(f'Calling fetch_stock_data for symbol: {symbol}, name: {name}')
                                call_command('fetch_stock_data', symbol=symbol, name=name)
                                logger.debug(f'Successfully fetched data for {symbol}')
                                return JsonResponse({'message': 'Stock added and data fetched successfully'}, status=201)
                            except Exception as e:
                                logger.error(f'Error fetching stock data for {symbol}: {str(e)}')
                                return JsonResponse({'error': f'Error fetching stock data: {str(e)}'}, status=500)
                        else:
                            logger.error('Stock already exists')
                            return JsonResponse({'error': 'Stock already exists'}, status=400)
                    except json.JSONDecodeError:
                        logger.error('Invalid JSON')
                        return JsonResponse({'error': 'Invalid JSON'}, status=400)
                    except Exception as e:
                        logger.error(f'Unexpected error: {str(e)}')
                        return JsonResponse({'error': f'Unexpected error: {str(e)}'}, status=500)
                else:
                    logger.debug('GET request to add_stock view')
                    return HttpResponse("Add Stock View", status=200)
